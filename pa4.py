import copy
from SudokuMatrix import *


# File: pa4.py
# Author: Phillip Miller
# Date: 4/19/2023
# Description: solve sudoku but fast -- hit .18 in testing


def parse_file(size: int, filename: str) -> SudokuMatrix:
    """
    parses spec file format -> returns Sudoku Matrix Object
    """
    matrix = SudokuMatrix(size)
    with open(filename) as file:
        for line in file:
            line = line.split()
            row, col = list(map(int, line[:2]))
            value = line[2]
            matrix[row - 1, col - 1] = value

    return matrix


def backtrack(matrix: SudokuMatrix, nodes_traveled):
    for row, col in matrix:  # goes by least possible values
        ordered_values = matrix.get_ordered_values(row, col)
        for value in ordered_values:  # try all values
            try:
                do_recursion = (value != ordered_values[-1])  # if one val or on last value don't recurse or copy
                new_matrix = copy.deepcopy(matrix) if do_recursion else matrix
                new_matrix[row, col] = value
                if do_recursion:
                    success, ending_matrix, nodes_traveled = backtrack(new_matrix, nodes_traveled + 1)
                    if success:
                        return success, ending_matrix, nodes_traveled
                else:
                    break
            except ViolateSudokuError:  # the matrix assignment checks for validity -> try another assignment
                continue

        else:  # tried all assignments and none worked
            return False, None, nodes_traveled

    return True, matrix, nodes_traveled  # you hit the last tile


def solve(size, filename):
    """
    The first element is a nested list containing the solution to the problem
    The second element of the tuple is the number of nodes in the state space tree that were generated by your solution.
    """
    try:
        starting_matrix = parse_file(size, filename)
    except ViolateSudokuError:  # bad starting configuration
        return None, 0

    success, ending_matrix, nodes_traveled = backtrack(starting_matrix, 0)

    if success:
        return ending_matrix.matrix, nodes_traveled
    else:
        return None, nodes_traveled


if __name__ == "__main__":
    SIZE = 9
    FILENAME = "p6.txt"
    solution = solve(SIZE, FILENAME)
    if not solution[0]:
        print("No solution")
    else:
        print(solution[0])
    print(f"Nodes generated = {solution[1]}")
